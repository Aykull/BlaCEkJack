#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1101 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"require"
0 0 17 3 1 #" "
0 0 17 3 11 #"games/cards"
0 0 17 3 1 #" "
0 0 17 3 10 #"racket/gui"
0 0 17 3 1 #" "
0 0 17 3 12 #"racket/class"
0 0 17 3 1 #" "
0 0 17 3 13 #"\"Logica.rkt\")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"games/cards"
0 0 24 3 1 #" "
0 0 14 3 10 #"racket/gui"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/class"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; Se crea una mesa"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-table"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"Blackjack\""
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 4 #"show"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; Retorno del ancho y el largo de la mesa"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 11 #"table-width"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 2 #" ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 12 #"table-height"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";; Constantes que definen los l\303\255mites de las regiones"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"SUBMARGIN"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"LABEL-H"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;Construcci\303\263n del deck de la GUI"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"deck"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-deck"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Ancho y largo de las cartas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 2 #" ("
0 0 14 3 4 #"send"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"deck"
0 0 24 3 2 #") "
0 0 14 3 10 #"card-width"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"cheight"
0 0 24 3 2 #" ("
0 0 14 3 4 #"send"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"deck"
0 0 24 3 2 #") "
0 0 14 3 11 #"card-height"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Definici\303\263n del tama\303\261o de los botones"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"BUTTON-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"BUTTON-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Creacion de botones"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-button"
0 0 24 3 1 #" "
0 0 14 3 5 #"title"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"make-button-region"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 12 #"BUTTON-WIDTH"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"BUTTON-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 1 #" "
0 0 14 3 13 #"BUTTON-HEIGHT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 12 #"BUTTON-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 13 #"BUTTON-HEIGHT"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 5 #"title"
0 0 24 3 1 #" "
0 0 14 3 4 #"void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"hit-button"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-button"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Pedir carta\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"stand-button"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-button"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"Plantarse\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";Evita que el usuario mueva las cartas "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 3 #") ("
0 0 15 3 5 #"send*"
0 0 24 3 1 #" "
0 0 14 3 4 #"card"
0 0 24 3 2 #" ("
0 0 14 3 13 #"user-can-move"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 13 #"user-can-flip"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 4 #"deck"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; Crea regiones de juego para los jugadores"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"deck-region"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-region"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 1 #" "
0 0 14 3 7 #"cheight"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"discard-region"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-region"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 2 #") "
0 0 14 3 6 #"MARGIN"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 1 #" "
0 0 14 3 7 #"cheight"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"crupier-region"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-region"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 3 #")) "
0 0 14 3 6 #"MARGIN"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 3 #")) "
0 0 14 3 7 #"cheight"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"player1-region"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-region"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 2 #") "
0 0 14 3 7 #"cheight"
0 0 24 3 1 #" "
0 0 14 3 13 #"BUTTON-HEIGHT"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 6 #"MARGIN"
0 0 24 3 3 #")) "
0 0 14 3 7 #"cheight"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"player2-region"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-region"
0 0 24 3 1 #" "
0 0 21 3 3 #"350"
0 0 24 3 1 #" "
0 0 21 3 3 #"215"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 1 #" "
0 0 21 3 3 #"115"
0 0 24 3 2 #") "
0 0 14 3 7 #"cheight"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"player3-region"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"make-region"
0 0 24 3 2 #"  "
0 0 14 3 6 #"MARGIN"
0 0 24 3 1 #" "
0 0 21 3 3 #"215"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"cwidth"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 14 3 7 #"cheight"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(define player1-region"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";  (make-region 50 50 cwidth cheight #f #f))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;Funcion para graficar"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(define (graficar region)"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";         (send table move-cards-to-region (retornarcarta region ) r"
 #"egion))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; Se ponen las cartas sobre la mesa"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 19 #"add-cards-to-region"
0 0 24 3 1 #" "
0 0 14 3 4 #"deck"
0 0 24 3 1 #" "
0 0 14 3 11 #"deck-region"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";(send table move-cards-to-region (deal 2) player1-region)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"deal"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"deal"
0 0 24 3 3 #" (["
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 4 #"null"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"deck"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"deck"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"deck"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 4 #"deal"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(define play1"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";  (send table move-cards-to-region (deal 6) player1-region)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  )"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(define play2"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";  (send table move-cards-to-region (deal 5) player2-region))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(define play3"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";  (send table move-cards-to-region (deal 5) player3-region))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"graficarTabla"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"main"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 20 #"move-cards-to-region"
0 0 24 3 2 #" ("
0 0 14 3 4 #"deal"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 14 #"crupier-region"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 20 #"move-cards-to-region"
0 0 24 3 2 #" ("
0 0 14 3 4 #"deal"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 14 #"player1-region"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 20 #"move-cards-to-region"
0 0 24 3 2 #" ("
0 0 14 3 4 #"deal"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 14 #"player2-region"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 5 #"table"
0 0 24 3 1 #" "
0 0 14 3 20 #"move-cards-to-region"
0 0 24 3 2 #" ("
0 0 14 3 4 #"deal"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 14 #"player3-region"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 13 #"graficarTabla"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;; Funcion principal"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(let shuffle-loop ()"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 17 3 57 #";  ;; AQUI VA LA FUNCION QUE REPARTE LAS CARTAS INICIALES"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (let*"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";      ([deck (shuffle-list deck 7)]"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";         [discard null]"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";         [deal (lambda (n)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                 (let deal ([n n])"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";                   (if (zero? n)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";                     null"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";                     (let ([c (car deck)])"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";                       (set! deck (cdr deck))"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";                       (cons c (deal (sub1 n)))))))])"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 24 29 1 #"\n"
0 0 17 3 31 #";    ;; PONE EL DECK EN LA MESA"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";    (send table move-cards-to-region deck deck-region)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";    (send table stack-cards deck)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";    "
0 0 24 29 1 #"\n"
0 0 17 3 121
(
 #";    ;; LOOP PRINCIPAL QUE SE EJECUTA HASTA QUE FINALICE EL JUEGO **"
 #"VER CONDICION DE CUANDO SE ACABAN LAS CARTAS DEL DECK"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";    ;;se debe modificar "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";    (let loop ()"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";      (let ([p (deal 2)])"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";        "
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";        ;; Secci\303\263n que mueve las cartas a la region del juga"
 #"dor"
) 0 0 24 29 1 #"\n"
0 0 17 3 59
#";        (send table move-cards-to-region p player1-region)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";        (send table cards-face-up p)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";        "
0 0 24 29 1 #"\n"
0 0 17 3 26 #";        ;; Deal to dealer"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";        (let ([d (deal 2)])"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";          "
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";          ;; Mueve las cartas del crupier a su region y muestra sol"
 #"o una"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#";          (send table move-cards-to-region d crupier-region)"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";          (send table card-face-up (car d))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";          "
0 0 24 29 1 #"\n"
0 0 17 3 18 #";          (let* ("
0 0 24 29 1 #"\n"
0 0 17 3 45 #";                 [continue (make-semaphore)]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";                 "
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";                 ;; Funcion que "
 #"establece el resultado AQUI deber\303\255a implementarse la tabla"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";                 [make-status"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";                  (lambda (title continue)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";                    (let ([r (make-button-region"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";                              (/ (- w (* 2 cwidth)) 2)"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";                              (region-y hit-button)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";                              (* 2 cwidth) BUTTON-HEIGHT"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";                              title #f)])"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";                      (set-region-callback! r (lambda ()"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";                                                (send table remove-"
 #"region r)"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";                                                (semaphore-post con"
 #"tinue)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";                      r))]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";                 "
0 0 24 29 1 #"\n"
0 0 17 3 124
(
 #";                 ;; Esta funcion cambia los botones de la interfaz "
 #"para mostrar el resultado, no necesaria para nuestra GUI"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";                 [done"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";                  (lambda (title continue)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";                    (send table remove-region hit-button)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";                    (send table remove-region stand-button)"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";                    (send table add-region (make-status title conti"
 #"nue))"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";                    )]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";                 "
0 0 24 29 1 #"\n"
0 0 17 3 135
(
 #";                 ;; FUNCION PARA TERMINAR : calcula los puntajes fi"
 #"nales, verifica blackjac aqu\303\255 tambi\303\251n se podr\303\255a"
 #" mostrar la tabla"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";                 ;;introducir aqui funcion de la l\303\263gica :v"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";                 [finish"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";                  (lambda (p blackjack?)"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";                    (let ([pt (best-total p)]"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";                          [dt (best-total d)]"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";                          [continue (make-semaphore)])"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";                      (cond"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";                        [(or (> dt 21) (> pt dt))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";                         (done (if blackjack?"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";                                 \"Blackjack\""
0 0 24 29 1 #"\n"
0 0 17 3 44 #";                                 \"You Win\")"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";                               continue)]"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                        [(> dt pt)"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";                         (done (if blackjack?"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";                                 \"Dealer Blackjack\""
0 0 24 29 1 #"\n"
0 0 17 3 45 #";                                 \"You Lose\")"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";                               continue)]"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";                        [else (done \"Push\" continue)])"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";                      (yield continue)))]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";                 ;;Termina el turno del jugador, funcion de la GUI"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                 [finish-split"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";                  (lambda (p player-region player-wait-region playe"
 #"r-border)"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";                    (unless (bust? p)"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";                      (send table move-cards-to-region p player-reg"
 #"ion)"
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";                      (send table add-region player-border)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";                      (finish p #f)"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";                      (send table remove-region player-border)"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";                      (send table move-cards-to-region p player-wai"
 #"t-region)))]"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";                 ;; Funcion para indicar que el jugador se paso de "
 #"21"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";                 [bust (lambda ()"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";                         (done \"Usted se ha pasado de verga\" cont"
 #"inue))]"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";                 ;; Bust in one hand of a split"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";                 [local-bust (lambda ()"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";                               (let ([cont (make-semaphore)])"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";                                 (done \"Bust\" cont)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";                                 (yield cont)))]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";                 ;; Callback for the hit button; the button's callb"
 #"ack is"
) 0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";                 ;; changed for different modes: normal, split part"
 #" 1, or split"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";                 ;; part 2"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";                 [make-hit-callback"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";                  (lambda (get-p set-p! player-region bust)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                    (lambda ()"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";                      (set-p! (append (deal 1) (get-p)))"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";                      (send table stack-cards (get-p))"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";                      (send table move-cards-to-region (get-p) play"
 #"er-region)"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";                      (send table cards-face-up (get-p))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";                      ;; Check for bust"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";                      (when (bust? (get-p)) (bust))))])"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";            ;; Funcion que verifica el blackjack natural, cambiar p"
 #"or la de l\303\263gica"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #";            (if (or (= 21 (best-total p))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";                    (= 21 (best-total d)))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";              (begin"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";                ;; Show the dealers cards..."
0 0 24 29 1 #"\n"
0 0 17 3 45 #";                (send table cards-face-up d)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";                ;; ... and compute the result"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                (finish p #t))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";              (begin"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";                ;; Three basic actions are allowed:"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                (send table add-region hit-button)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";                (send table add-region stand-button)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";                ;; Set the callbacks for normal (unsplit) hands"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";                (set-region-callback!"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";                 hit-button"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";                 (make-hit-callback (lambda () p)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";                                    (lambda (v) (set! p v))"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                                    player1-region"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";                                    bust))"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";                (set-region-callback!"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";                 stand-button"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";                 (lambda () (semaphore-post continue)))           "
0 0 24 29 1 #"\n"
0 0 17 3 49 #";                ;; Wait until the player is done"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";                (yield continue)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";                ;; No more player actions; get rid of the buttons"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";                (send table remove-region hit-button)"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";                (send table remove-region stand-button)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";                ;; If all the player's hards are bust, the dealer d"
 #"oesn't do"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";                ;; anything"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";                (unless (bust? p)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";                  ;; Show the dealer's starting hand"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";                  (send table card-face-up (cadr d))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                  (let loop ()"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";                    ;; Hit on 16 or lower, stand on 17 and higher"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";                    (when (< (best-total d) 17)"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";                      ;; Hit the dealer"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                      (set! d (append (deal 1) d))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";                      (send table stack-cards d)"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";                      (send table move-cards-to-region d crupier-re"
 #"gion)"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";                      (send table cards-face-up d)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                      (loop)))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                  (finish p #f)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";                  )))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";            ;; Move all the discarded cards to the back"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";            (unless (null? discard)"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";              (send table card-to-back (car discard))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";              (send table stack-cards discard))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";            ;; Discard all the cards we used"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";            (set! discard (append p d discard)) ;;retorna las carta"
 #"s a la pila de descarte "
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";            (send table cards-face-down discard) ;;pone las cartas "
 #"boca abajo"
) 0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";            (send table move-cards-to-region discard discard-region"
 #") ;; mueve las cartas de una zona a otra"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";           "
0 0 24 29 1 #"\n"
0 0 17 3 27 #";              (loop)))))))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;; Function to compute the normal or minimum value of a card"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(define (min-card-value c)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";  (let ([v (send c get-value)]) (if (> v 10) 10 v)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;; Function to compute the value of a hand, counting aces as 1 or 1"
 #"1"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";;;  to get the highest total possible under 21"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(define (best-total l)"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";  (let* ([ace? (lambda (is?) (lambda (c) (eq? is? (= (send c get-va"
 #"lue) 1))))]"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";         [aces (filter (ace? #t) l)]"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";         [others (filter (ace? #f) l)]"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";         [base (apply + (map min-card-value others))])"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";    (let loop ([l aces][base base])"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";      (cond [(null? l) base]"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";            [(<= (+ base (* (length aces) 11)) 21)"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";             (+ base (* (length aces) 11))]"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";            [else (loop (cdr l) (add1 base))]))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;; Function to test whether a hand is a bust"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(define (bust? p)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";  (> (best-total p) 21))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0           0
